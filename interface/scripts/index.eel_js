// グローバル変数
let dataset_list = {};
let general_settings = {};
let is_received_initial_settings = false;
let is_now_updating_connection_list = false;
let unix_before_graph_updated = new Date().getTime();
let unix_before_data_updated = new Date().getTime();
let now_focus_graph_id = "all"; // "all" or value_id
let large_chart_obj = undefined;
let is_allow_all_graph_update = true;
let typingIntervals = {};
const DEFAULT_PAGE_ID = "header_show_connection";

// グローバル変数ここまで

// その他関数

function show_error(e) {
  console.error(e);
}

function insert_text_as_typing(element, text, is_clear = false, interval_ms = 25) {
  try {
    /**
     * Inserts text into an element as if it is being typed, with an optional clearing of the element's previous text.
     *
     * @param {HTMLElement} element - The element to insert the text into.
     * @param {string} text - The text to be inserted.
     * @param {boolean} [is_clear=false] - Whether or not to clear the element's previous text. Defaults to false.
     * @param {number} [interval_ms=25] - The interval in milliseconds between each character being typed. Defaults to 25.
     */
    // Clear any existing typing interval for this element
    if (typingIntervals[element]) {
      clearInterval(typingIntervals[element]);
      delete typingIntervals[element];
    }

    // Clear the element's text if specified
    if (is_clear) {
      element.textContent = "";
    }

    // Start typing the text
    let cursor = 0;
    typingIntervals[element] = setInterval(() => {
      element.textContent += text.charAt(cursor);
      cursor++;
      if (cursor === text.length) {
        clearInterval(typingIntervals[element]);
      }
    }, interval_ms);
  } catch (e) {
    show_error(e);
  }
}

function Change_can_right_menu(can_right_menu) {
  document.oncontextmenu = function () {
    return can_right_menu;
  };
}

function Change_can_user_select(can_select) {
  if (can_select) {
    document.getElementsByTagName("html")[0].setAttribute("style", "user-select: auto;");
  } else {
    document.getElementsByTagName("html")[0].setAttribute("style", "user-select: none;");
  }
}

function remove_invalid_keys_as_python(given_dictionary) {
  console.log(given_dictionary);
  /* JSからPythonへ設定Dictionaryを送信するとき、ChartObjectなどはPythonオブジェクトに変換できないため、除去する */
  if (typeof given_dictionary !== "object" || given_dictionary === null) {
    return given_dictionary;
  }

  const temp_dict = {};
  Object.keys(given_dictionary).forEach((key) => {
    var value_type = typeof given_dictionary[key];
    if (["string", "number", "boolean"].includes(value_type)) {
      temp_dict[key] = given_dictionary[key];
    } else if (value_type == "object" && ["chart_obj"].includes(key)) {
      temp_dict[key] = remove_invalid_keys_as_python(given_dictionary[key]);
    }
  });

  return temp_dict;
}

function parse_suitable_types(string_like) {
  if (string_like === "null") {
    return null;
  } else if (string_like === "undefined") {
    return undefined;
  } else if (string_like === "true") {
    return true;
  } else if (string_like === "false") {
    return false;
  } else if (!isNaN(string_like)) {
    return Number(string_like);
  } else {
    return string_like;
  }
}

// その他関数ここまで

// グラフ描画
eel.expose(Data_PY2JS);
function Data_PY2JS(data) {
  /**
   * Update chart data with new data received from Python backend
   * @param {Object} data - Data received from Python backend
   */
  try {
    // Get current time in Unix format
    unix_before_data_updated = new Date().getTime();

    // If initial settings not received yet, return
    if (!is_received_initial_settings) {
      return;
    }

    // Check if it's time to update the graph (to reduce rendering load)
    let is_interval_update_graph = false;
    if (new Date().getTime() - unix_before_graph_updated > general_settings.interface.update_interval_sec * 1000) {
      is_interval_update_graph = true;
      unix_before_graph_updated = new Date().getTime();
    }

    // If currently focused on a specific graph and all graph update allowed, update large chart
    if (now_focus_graph_id != "all" && is_allow_all_graph_update) {
      large_chart_obj.update();
    }

    // Iterate through received data
    Object.keys(data).forEach(function (id) {
      // If received data is for an existing dataset
      if (Object.keys(dataset_list).includes(id)) {
        // Add new data to dataset
        let new_data = data[id];
        dataset_list[id].data.push(new_data);
        dataset_list[id].chart_obj.data.labels.push("");

        if (dataset_list[id].is_show_graph) {
          // If dataset has exceeded max display limit, remove oldest data point
          if (dataset_list[id].data.length > general_settings.interface.graph_max_display) {
            dataset_list[id].data.shift();
            dataset_list[id].chart_obj.data.labels.shift();
          }

          // Check if it's time to update all graphs and update if necessary
          var is_display_all_graphs = "all" == now_focus_graph_id;
          if (is_display_all_graphs && is_interval_update_graph && is_allow_all_graph_update) {
            dataset_list[id].chart_obj.update();
          }
        }

        // Check if it's time to update graph indicators and update if necessary
        if (is_interval_update_graph) {
          Array.from(document.getElementsByClassName(`value_${id}`)).forEach((element) => {
            var before_value = parseFloat(element.textContent);

            // Change color if value has changed
            if (before_value > new_data) {
              element.setAttribute("style", "background-color:rgba(255,0,0,0.075);");
            } else if (before_value < new_data) {
              element.setAttribute("style", "background-color:rgba(0,0,255,0.075);");
            }

            // Update displayed value
            element.innerHTML = new_data.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, "$&,"); // 3-digit comma separator, display up to 2 decimal places
          });
        }

        // Update graph indicators to reflect safe range
        Array.from(document.getElementsByClassName(`indicator_${id}`)).forEach((element) => {
          if (!isNaN(parseFloat(dataset_list[id].safe_range_max)) && !isNaN(dataset_list[id].safe_range_min)) {
            if (dataset_list[id].safe_range_max < new_data) {
              element.classList.add("danger");
              element.classList.remove("safe");
            } else if (dataset_list[id].safe_range_min > new_data) {
              element.classList.add("danger");
              element.classList.remove("safe");
            } else {
              element.classList.remove("danger");
              element.classList.add("safe");
            }
          }
        });
      }
    });
  } catch (e) {
    show_error(e);
  }
}

function focus_graph_to(id) {
  /**
   * This function focuses the graph to the specified id.
   * It updates the view to highlight the selected graph and display information about it.
   *
   * @param {string} id - the id of the graph to focus on
   */
  // if the selected graph is already in focus, return without doing anything
  if (id == now_focus_graph_id) {
    return;
  }

  // highlight the selected graph's indicator and remove the highlight from the previously focused graph's indicator
  document.getElementsByClassName(`indicator_${id}`)[0].getElementsByClassName("name")[0].setAttribute("style", "border-color: black;");
  document.getElementsByClassName(`indicator_${now_focus_graph_id}`)[0].getElementsByClassName("name")[0].setAttribute("style", "border-color: transparent;");

  // determine whether to switch from displaying all graphs to displaying a single large graph or vice versa
  let is_switch_all2large = !((id == "all" && now_focus_graph_id == "all") || (id != "all" && now_focus_graph_id != "all"));
  if (is_switch_all2large) {
    if (id == "all") {
      // hide the large graph and show the graph list
      document.getElementById("graphs").setAttribute("style", "display: flex;");
      document.getElementById("large_graphs").setAttribute("style", "display: none;");
    } else if (now_focus_graph_id == "all") {
      // hide the graph list and show the large graph
      document.getElementById("graphs").setAttribute("style", "display: none;");
      document.getElementById("large_graphs").setAttribute("style", "display: block;  width: 80%;");
    }
  }

  if (id != "all") {
    // display information about the selected graph in the large graph view
    document.getElementById("large_graphs_display_name").textContent = general_settings.data_list[id].display_name;

    // destroy the previous chart object for the large graph, if there was one
    if (large_chart_obj) {
      large_chart_obj.destroy();
    }

    // create a new chart object for the large graph
    large_chart_obj = new Chart(document.getElementById("large_graphs_chart_focus").getContext("2d"), {
      type: "line",
      data: {
        labels: dataset_list[id].chart_obj.data.labels,
        datasets: [
          {
            label: "Value",
            data: dataset_list[id].data,
            fill: true,
            backgroundColor: "rgba(255, 99, 132, 0.25)",
            borderWidth: 1,
            borderColor: "rgb(255, 99, 132)",
          },
        ],
      },
      options: {
        pointRadius: 0,
        animation: {
          duration: 0,
        },
        responsive: true,
        plugins: {
          legend: {
            display: false,
          },
        },
        scales: {
          x: {
            min: general_settings.interface.graph_min_display,
            max: general_settings.interface.graph_max_display,
            display: true,
          },
          y: {
            min: 0,
            // max: 100,
            display: true,
          },
        },
      },
    });

    // if allowed, update the large graph
    if (is_allow_all_graph_update) {
      large_chart_obj.update();
    }
  }

  // update the currently focused graph id
  now_focus_graph_id = id;
}

function add_timestamp_insert(unix) {
  const parent = document.getElementById("timestamp_insert");
  try {
    const new_html = ``;
  } catch (e) {
    show_error(e);
  }
}

function timestamp_on_pushed(mode) {
  eel.receive_timestamp(document.getElementById("1").value);
}

// グラフ描画ここまで

// ヘッダー
function on_clicked_header_button(comment) {
  /**
   * This function handles the click events of the header buttons.
   *
   * @param {string} comment - The comment associated with the clicked button
   */
  try {
    function hide_container() {
      /**
       * This function hides all the containers except the header and scrolls to the top of the page.
       */
      var container = document.getElementById("main").children;
      for (var i = 0; i < container.length; i++) {
        container[i].style.display = "none";
      }
      var container = document.getElementById("header_buttons").children;
      for (var i = 0; i < container.length; i++) {
        container[i].classList.remove("displayed");
      }
      window.scroll({ top: 0, behavior: "instant" });
    }
    // Show the hidden bar
    if ("bar_hide" == comment) {
      document.getElementById("header_on_hidden").style.display = "flex";
      document.getElementById("header_on_shown").style.display = "none";
      document.getElementById("main").setAttribute("style", "margin-top:20px;");
    }
    // Hide the hidden bar
    if ("bar_show" == comment) {
      document.getElementById("header_on_hidden").style.display = "none";
      document.getElementById("header_on_shown").style.display = "flex";
      document.getElementById("main").setAttribute("style", "margin-top:45px;");
    }
    // Show the graphs
    if ("show_graphs" == comment) {
      is_allow_all_graph_update = true;
      hide_container();
      document.getElementById("header_show_graphs").classList.add("displayed");
      document.getElementById("main_graphs").setAttribute("style", "display:flex;");
    }
    // Show the graphs
    if ("show_input_settings" == comment) {
      is_allow_all_graph_update = true;
      hide_container();
      document.getElementById("header_input_settings").classList.add("displayed");
      document.getElementById("main_input_settings").setAttribute("style", "display:flex;");
    }
    // Show the graphs
    if ("show_export_data" == comment) {
      is_allow_all_graph_update = true;
      hide_container();
      document.getElementById("header_export_data").classList.add("displayed");
      document.getElementById("main_export_data").setAttribute("style", "display:flex;");
    }
    // Show the connection settings
    if ("show_connection" == comment) {
      is_allow_all_graph_update = false;
      hide_container();
      document.getElementById("header_show_connection").classList.add("displayed");
      document.getElementById("main_connection_settings").setAttribute("style", "display:flex;");
    }

    // Show the display settings
    if ("show_settings" == comment) {
      is_allow_all_graph_update = false;
      hide_container();
      document.getElementById("header_show_settings").classList.add("displayed");
      document.getElementById("main_display_settings").setAttribute("style", "display:flex;");
    }
  } catch (e) {
    show_error(e);
  }
}

eel.expose(add_remove_notification);
function add_remove_notification(is_add, id, initial, description) {
  /**
   * Adds or removes a notification from the header.
   * @param {boolean} is_add - Whether to add or remove the notification.
   * @param {string} id - The ID of the notification.
   * @param {string} initial - The initial to display on the notification.
   * @param {string} description - The description to display on the notification.
   */
  try {
    const parent = document.getElementById("header_notifications");
    if (is_add) {
      // Create a new notification element with the given ID, initial, and description.
      let new_notification = document.createElement("div");
      new_notification.classList.add("notification_icon");
      new_notification.setAttribute("id", `notification_${id}`);
      new_notification.innerHTML = `
      <div class="notification_icon">
        <div class="notification_initial">${initial}</div>
        <div class="notification_popup">${description}</div>
      </div>
    `;
      // Add the new notification element to the parent element.
      parent.appendChild(new_notification);
    } else {
      // Remove the notification element with the given ID from the parent element.
      var target_element = document.getElementById(`notification_${id}`);
      if (target_element) {
        parent.removeChild(target_element);
      }
    }
  } catch (e) {
    show_error(e);
  }
}

// ヘッダーここまで

// 初期起動時

document.addEventListener("DOMContentLoaded", function () {
  try {
    console.log("DOM fully loaded and parsed");

    // Prevent page reload
    window.addEventListener("beforeunload", function (e) {
      // 開発時はコメントアウト
      // e.preventDefault();
      // e.returnValue = "本当に閉じますか？ウィンドウを閉じても、ロギングは継続されます。";
    });

    Change_can_right_menu(false);
    Change_can_user_select(false);
    eel.window_initialize(); // Pythonに設定情報の送信を要求する
    document.getElementById(DEFAULT_PAGE_ID).click(); // 起動時にデバイス接続設定の画面を表示
  } catch (e) {
    show_error(e);
  }
});

eel.expose(Get_Initial_Settings);
function Get_Initial_Settings(provided_setting_dict) {
  /**
   * Initializes the settings and UI of the web application.
   * @param {Object} provided_setting_dict - A dictionary of initial settings.
   */
  try {
    document.getElementById(DEFAULT_PAGE_ID).click(); // 起動時にデバイス接続設定の画面を表示
    console.log("Initialize start");

    // Copy provided settings to general_settings
    Object.keys(provided_setting_dict.values).forEach(function (id) {
      general_settings[id] = provided_setting_dict.values[id];
    });

    // Initialize dataset_list
    Object.keys(general_settings.data_list).forEach(function (id) {
      dataset_list[id] = general_settings.data_list[id];
      dataset_list[id]["chart_obj"] = undefined;
      dataset_list[id]["data"] = [];
    });

    // Change to dark mode if specified
    if (general_settings.interface.dark_mode) {
      change_dark_mode((change_to = "dark"));
    } else {
      change_dark_mode((change_to = "light"));
    }

    // Insert elements in container
    const containers = document.getElementById("graphs");
    const indicators = document.getElementById("indicators").getElementsByTagName("table")[0];

    // Insert "Show all graphs" button
    indicators.innerHTML += `\
      <tr class="labels indicator indicator_all safe" onclick="focus_graph_to('all');">\
        <td style="border-color: black;" colspan="3" class="name">すべてのグラフを表示する</td>\
      </tr>\
      `;

    // Insert containers and indicators for each dataset
    Object.keys(dataset_list).forEach(function (id) {
      if (dataset_list[id].is_show_graph === true) {
        containers.innerHTML += `\
          <div class="container container_${id}">\
            <div class="labels">\
              <span class="name">${dataset_list[id].display_name}</span>\
              <span class="value value_${id}">-</span>\
              <span class="unit">${dataset_list[id].unit}</span>\
            </div>\
            <div class="chart">\
              <canvas id="chart_${id}"></canvas>\
            </div>\
          </div>\
        `;
      }
      indicators.innerHTML += `\
      <tr class="labels indicator indicator_${id}" onclick="focus_graph_to('${id}');">\
        <td class="name">${dataset_list[id].display_name}</td>\
        <td class="value value_${id}">-</td>\
        <td class="unit">${dataset_list[id].unit}</td>\
      </tr>\
      `;
    });

    // Enable each graph
    Object.keys(dataset_list).forEach(function (id) {
      if (dataset_list[id].is_show_graph === true) {
        let this_canvas = document.getElementById(`chart_${id}`).getContext("2d");
        dataset_list[id].chart_obj = new Chart(this_canvas, {
          type: "line",
          data: {
            labels: [],
            datasets: [
              {
                label: "Value",
                data: dataset_list[id].data,
                fill: true,
                backgroundColor: "rgba(255, 99, 132, 0.25)",
                borderWidth: 1,
                borderColor: "rgb(255, 99, 132)",
              },
            ],
          },
          options: {
            pointRadius: 0,
            animation: {
              duration: 0,
            },
            responsive: true,
            plugins: {
              legend: {
                display: false,
              },
            },
            scales: {
              x: {
                min: 0,
                // max: general_settings.interface.graph_max_display,
                display: true,
              },
              y: {
                min: 0,
                // max: 100,
                display: true,
              },
            },
          },
        });
      } else {
        dataset_list[id].chart_obj = {data: {labels: []}};
      }
    });

    // Insert settings
    const setting_tbody = document.getElementById("main_display_settings").getElementsByClassName("change_settings")[0].getElementsByTagName("tbody")[0];
    const changeable_settings_key = ["interface", "data_logging", "body"];
    changeable_settings_key.forEach(function (key) {
      if (Object.keys(general_settings).includes(key)) {
        Object.keys(general_settings[key]).forEach(function (id) {
          var value_type = {
            number: "number",
            boolean: "checkbox",
            string: "text",
          }[typeof general_settings[key][id]];

          if (value_type === "checkbox") {
            if (general_settings[key][id] === true) {
              var attribute_is_checked = "checked";
            } else {
              var attribute_is_checked = "";
            }
          } else {
            var attribute_is_checked = "";
          }

          setting_tbody.innerHTML += `\
          <tr>\
          <td>${key}.${id}</td>\
          <td>${provided_setting_dict.description[key][id].replace("\n", "<br>")}</td>\
          <td>${general_settings[key][id]}</td>\
          <td><input type="${value_type}" id="setting_${key}_${id}" value="${general_settings[key][id]}" ${attribute_is_checked}/></td>\
          </tr>\
          `;
        });
      }
    });

    // Insert input settings
    const input_setting_table_tbody = document.getElementById("main_input_settings").getElementsByTagName("tbody")[0];
    Object.keys(general_settings.data_list).forEach(function (id) {
      input_setting_table_tbody.innerHTML += `
      <tr>
        <td>${id}</td>
        <td><input style="width: 175pt;" type="text" id="input_setting_${id}_display_name" value="${general_settings.data_list[id].display_name}"></td>
        <td>float</td>
        <td>${general_settings.data_list[id].unit}</td>
        <td>red</td>
        <td><input style="width: 50pt;" type="text" id="input_setting_${id}_" value="${general_settings.data_list[id].safe_range_min}"></td>
        <td><input style="width: 50pt;" type="text" id="input_setting_${id}_" value="${general_settings.data_list[id].safe_range_max}"></td>
        <td><input style="width: 50pt;" type="text" id="input_setting_${id}_" value="${general_settings.data_list[id].y_lim_min}"></td>
        <td><input style="width: 50pt;" type="text" id="input_setting_${id}_" value="${general_settings.data_list[id].y_lim_max}"></td>
        <td>${general_settings.data_list[id].display_sort}</td>
        <td>${general_settings.data_list[id].input_sort}</td>
      </tr>
      `;
    });

    console.log("Initialize done");
    is_received_initial_settings = true;
    return true;
  } catch (e) {
    show_error(e);
  }
}

// 初期起動時ここまで

// Pythonとの接続

eel.expose(progress_manager);
function progress_manager(message) {
  /**
   * Manages progress messages for async calls to Python functions.
   * @param {string} message - The progress message to be displayed.
   */
  try {
    // If connection list update has started
    if (message == "connection_list_update_started") {
      // Display message to user
      insert_text_as_typing(document.getElementById("main_connection_settings").getElementsByClassName("message")[0], "接続リストをリセットしています。Bluetoothデバイスの検知には時間がかかります。しばらくお待ちください。", true);
      // Set flag to indicate that connection list is being updated
      is_now_updating_connection_list = true;
    }
    // If connection list update has completed
    if (message == "connection_list_update_done") {
      // Display message to user
      insert_text_as_typing(document.getElementById("main_connection_settings").getElementsByClassName("message")[0], "接続リストの更新が終わりました。ここで接続先デバイスを選ぶことができます。リストの更新には20秒程度かかります。", true);
      // Set flag to indicate that connection list update is complete
      is_now_updating_connection_list = false;
    }
  } catch (e) {
    // If an error occurs, show the error message to user
    show_error(e);
  }
}

eel.expose(window_alive_check_fromPy);
function window_alive_check_fromPy() {
  unix_before_data_updated = new Date().getTime();
}

setInterval(function () {
  eel.window_alive_check_fromJS();
}, 10);

let connection_downtime = 0;
const timeout_ms = 3000;
setInterval(function () {
  const alert_element = document.getElementById("alert_timeout");
  connection_downtime += 100;
  // eel._print(connection_downtime, new Date().getTime() - unix_before_data_updated);
  if (new Date().getTime() - unix_before_data_updated > timeout_ms) {
    alert_element.setAttribute("style", "display: block;");
    if (connection_downtime > timeout_ms * 2) {
      window.close();
    }
  } else {
    connection_downtime = 0;
    alert_element.setAttribute("style", "display: none;");
  }
}, 100);

// Pythonとの接続ここまで

// 接続先リスト
eel.expose(reload_connection_list);
function reload_connection_list(connection_list, clear_all = false) {
  /**
   * Reloads the connection list in the HTML table.
   * @param {Object} connection_list - The list of connections to display.
   * @param {boolean} [clear_all=false] - Whether to clear all connections before reloading.
   */
  try {
    // Get the table body element
    const tbody = document.getElementById("main_connection_settings").getElementsByTagName("tbody")[0];

    // Clear all connections if requested
    if (clear_all) {
      tbody.innerHTML = "";
    }

    // Add each connection to the table
    if (connection_list != undefined) {
      Object.keys(connection_list).forEach((id) => {
        var new_tr = document.createElement("tr");

        // Add the appropriate class and elements based on the connection state
        if (connection_list[id].connected === true) {
          new_tr.classList.add("disconnect");
          new_tr.innerHTML += `
          <td class="info">
            <div class="name">*${connection_list[id].name}</div>
            <div class="type">${connection_list[id].type}（接続済み）</div>
            <div class="address">${id}</div>
            <div class="connection_button disconnect" onclick="eel.connect_device('**disconnect**');">接続を解除する</div>
          </td>
          <td class="preview">
            <div class="raw_received_label">受信結果</div>
            <div class="raw_received">${connection_list[id].response}</div>
          </td>
        `;
        } else if (connection_list[id].connected === false) {
          new_tr.innerHTML += `
          <td class="info">
            <div class="name">${connection_list[id].name}</div>
            <div class="type">${connection_list[id].type}</div>
            <div class="address">${id}</div>
            <div class="connection_button connect" onclick="eel.connect_device('${id}');">接続する</div>
          </td>
          <td class="preview">
            <div class="raw_received_label">受信結果</div>
            <div class="raw_received">${connection_list[id].response}</div>
          </td>
        `;
        }

        // Add the new row to the table body
        tbody.appendChild(new_tr);
      });
    }
  } catch (e) {
    show_error(e);
  }
}

function on_reset_connection_list_button_pushed() {
  /**
   * This function is called when the reset connection list button is pushed.
   * If the connection list is not currently being updated, it clears the list and
   * makes a call to retrieve the device list.
   */
  try {
    // Check if the connection list is being updated
    if (is_now_updating_connection_list == false) {
      // Clear the connection list
      reload_connection_list((connection_list = undefined), (clear_all = true));

      // Retrieve the device list
      eel.get_device_list();
    }
  } catch (e) {
    show_error(e);
  }
}

// 接続先リストここまで

// 設定画面

function apply_new_settings() {
  /**
   * Applies new settings based on user input in the settings table
   */
  try {
    // Get the settings table and its body
    const settings_table = document.getElementById("main_display_settings").getElementsByClassName("change_settings")[0];
    const settings_table_body = settings_table.getElementsByTagName("tbody")[0];

    // Get all the rows in the settings table body and loop through them
    const settings_table_body_trs = settings_table_body.getElementsByTagName("tr");

    const new_settings = {};
    Array.from(settings_table_body_trs).forEach((tr) => {
      // Get the variable ID and value for the current row
      var variable_id = tr.getElementsByTagName("td")[0].textContent;
      if (tr.getElementsByTagName("input")[0].type === "checkbox") {
        var variable_value = tr.getElementsByTagName("input")[0].checked;
      } else {
        var variable_value = parse_suitable_types(tr.getElementsByTagName("input")[0].value);
      }

      // Split the variable ID into its parent and child parts
      var variable_id_parent = variable_id.split(".")[0];
      var variable_id_child = variable_id.split(".")[1];

      // Update the corresponding value in the general_settings object
      general_settings[variable_id_parent][variable_id_child] = variable_value;
      if (new_settings[variable_id_parent] == undefined) {
        new_settings[variable_id_parent] = {};
      }
      new_settings[variable_id_parent][variable_id_child] = variable_value;
    });
    eel.apply_new_settings_to_python(new_settings);

    // Display a success message
    insert_text_as_typing(document.getElementById("main_display_settings").getElementsByClassName("message")[0], "設定を適用しました。ここで表示やデータ処理に関する設定を変更できます。", true);
  } catch (e) {
    // Show an error message if an exception is caught
    show_error(e);
  }
}

function change_dark_mode(change_to = "") {
  /**
   * Toggles the dark mode on the HTML element.
   *
   * @param {string} change_to - Optional parameter to set the mode.
   *                             Possible values: "dark", "light", "".
   */
  try {
    const is_now_dark_mode = document.getElementsByTagName("html")[0].classList.contains("dark");

    const is_change_to_dark = change_to == "dark" || (change_to == "" && !is_now_dark_mode);
    const is_change_to_light = change_to == "light" || (change_to == "" && is_now_dark_mode);

    if (is_change_to_light) {
      document.getElementsByTagName("html")[0].classList.remove("dark");
      document.getElementsByTagName("html")[0].classList.add("light");
      return;
    } else if (is_change_to_dark) {
      document.getElementsByTagName("html")[0].classList.remove("light");
      document.getElementsByTagName("html")[0].classList.add("dark");
      return;
    }
  } catch (e) {
    show_error(e);
  }
}

// 設定画面ここまで
