// グローバル変数
let dataset_list = {};
let general_settings = {};
let is_received_initial_settings = false;
let is_now_updating_connection_list = false;
let unix_before_graph_updated = new Date().getTime();
let unix_before_data_updated = new Date().getTime();
let now_focus_graph_id = "all"; // "all" or value_id
let large_chart_obj = undefined;
let is_allow_all_graph_update = true;
let typingIntervals = {};

// グローバル変数ここまで

// その他関数

function show_error(e) {
  console.error(e);
}

function insert_text_as_typing(element, text, is_clear = false, interval_ms = 25) {
  if (typingIntervals[element]) {
    clearInterval(typingIntervals[element]);
    delete typingIntervals[element];
  }
  if (is_clear) {
    element.textContent = "";
  }
  let cursor = 0;
  typingIntervals[element] = setInterval(() => {
    element.textContent += text.charAt(cursor);
    cursor++;
    if (cursor === text.length) {
      clearInterval(typingIntervals[element]);
    }
  }, interval_ms);
}

// その他関数ここまで

// グラフ描画

eel.expose(Data_PY2JS);
function Data_PY2JS(data) {
  // Receive data from python (update data)
  try {
    unix_before_data_updated = new Date().getTime();
    if (!is_received_initial_settings) {
      return;
    }

    // 前回のグラフ更新から一定時間が経たないとグラフが更新しない（描画処理の負荷軽減）
    let is_interval_update_graph = false;
    if (new Date().getTime() - unix_before_graph_updated > general_settings.interface.update_interval_sec * 1000) {
      is_interval_update_graph = true;
      unix_before_graph_updated = new Date().getTime();
    }

    if (now_focus_graph_id != "all" && is_allow_all_graph_update) {
      large_chart_obj.update();
    }

    Object.keys(data).forEach(function (id) {
      if (Object.keys(dataset_list).includes(id)) {
        let new_data = data[id];
        dataset_list[id].data.push(new_data);
        dataset_list[id].chart_obj.data.labels.push("");

        if (dataset_list[id].data.length > general_settings.interface.graph_max_display) {
          dataset_list[id].data.shift();
          dataset_list[id].chart_obj.data.labels.shift();
        }

        var is_display_all_graphs = "all" == now_focus_graph_id;
        if (is_display_all_graphs && is_interval_update_graph && is_allow_all_graph_update) {
          dataset_list[id].chart_obj.update();
        }

        if (is_interval_update_graph) {
          Array.from(document.getElementsByClassName(`value_${id}`)).forEach((element) => {
            var before_value = parseFloat(element.textContent);

            // 値が変わったら色を変える
            if (before_value > new_data) {
              element.setAttribute("style", "background-color:rgba(255,0,0,0.075);");
            } else if (before_value < new_data) {
              element.setAttribute("style", "background-color:rgba(0,0,255,0.075);");
            }

            element.innerHTML = new_data.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, "$&,"); // 3桁ごとカンマ 小数点第2位まで表示
          });
        }

        Array.from(document.getElementsByClassName(`indicator_${id}`)).forEach((element) => {
          if (dataset_list[id].safe_range_max < new_data) {
            element.classList.add("danger");
            element.classList.remove("safe");
          } else if (dataset_list[id].safe_range_min > new_data) {
            element.classList.add("danger");
            element.classList.remove("safe");
          } else {
            element.classList.remove("danger");
            element.classList.add("safe");
          }
        });
      }
    });
  } catch (e) {
    show_error(e);
  }
}

function focus_graph_to(id) {
  if (id == now_focus_graph_id) {
    return;
  }

  document.getElementsByClassName(`indicator_${id}`)[0].setAttribute("style", "border-color: black;");
  document.getElementsByClassName(`indicator_${now_focus_graph_id}`)[0].setAttribute("style", "border-color: transparent;");

  let is_switch_all2large = !((id == "all" && now_focus_graph_id == "all") || (id != "all" && now_focus_graph_id != "all"));
  if (is_switch_all2large) {
    if (id == "all") {
      // large_graphを非表示にして、グラフ一覧を表示する
      document.getElementById("graphs").setAttribute("style", "display: flex;");
      document.getElementById("large_graphs").setAttribute("style", "display: none;");
    } else if (now_focus_graph_id == "all") {
      // グラフ一覧を非表示にして、large_graphを表示する
      document.getElementById("graphs").setAttribute("style", "display: none;");
      document.getElementById("large_graphs").setAttribute("style", "display: block;  width: 80%;");
    }
  }

  if (id != "all") {
    // large_graphに情報を表示する
    document.getElementById("large_graphs_display_name").textContent = general_settings.data_list[id].display_name;
    if (large_chart_obj) {
      large_chart_obj.destroy();
    }
    large_chart_obj = new Chart(document.getElementById("large_graphs_chart_focus").getContext("2d"), {
      type: "line",
      data: {
        labels: dataset_list[id].chart_obj.data.labels,
        datasets: [
          {
            label: "Value",
            data: dataset_list[id].data,
            fill: true,
            backgroundColor: "rgba(255, 99, 132, 0.25)",
            borderWidth: 1,
            borderColor: "rgb(255, 99, 132)",
          },
        ],
      },
      options: {
        pointRadius: 0,
        animation: {
          duration: 0,
        },
        responsive: true,
        plugins: {
          legend: {
            display: false,
          },
        },
        scales: {
          x: {
            // min: 0,
            // max: general_settings.interface.graph_max_display,
            display: true,
          },
          y: {
            // min: 0,
            // max: 100,
            display: true,
          },
        },
      },
    });
    if (is_allow_all_graph_update) {
      large_chart_obj.update();
    }
  }

  now_focus_graph_id = id;
}

function add_timestamp_insert(unix) {
  const parent = document.getElementById("timestamp_insert");
  try {
    const new_html = ``;
  } catch (e) {
    show_error(e);
  }
}

function timestamp_onchange() {
  // console.log(document.getElementById("1").value);
}

// グラフ描画ここまで

// ヘッダー
function on_clicked_header_button(comment) {
  try {
    function hide_container() {
      var container = document.getElementById("main").children;
      for (var i = 0; i < container.length; i++) {
        container[i].style.display = "none";
      }
      var container = document.getElementById("header_buttons").children;
      for (var i = 0; i < container.length; i++) {
        container[i].classList.remove("displayed");
      }
      window.scroll({ top: 0, behavior: "instant" });
    }
    if ("bar_hide" == comment) {
      document.getElementById("header_on_hidden").style.display = "flex";
      document.getElementById("header_on_shown").style.display = "none";
      document.getElementById("main").setAttribute("style", "margin-top:20px;");
    }
    if ("bar_show" == comment) {
      document.getElementById("header_on_hidden").style.display = "none";
      document.getElementById("header_on_shown").style.display = "flex";
      document.getElementById("main").setAttribute("style", "margin-top:45px;");
    }
    if ("show_graphs" == comment) {
      is_allow_all_graph_update = true;
      hide_container();
      document.getElementById("header_show_graphs").classList.add("displayed");
      document.getElementById("main_graphs").setAttribute("style", "display:flex;");
    }
    if ("show_connection" == comment) {
      is_allow_all_graph_update = false;
      hide_container();
      document.getElementById("header_show_connection").classList.add("displayed");
      document.getElementById("main_connection_settings").setAttribute("style", "display:flex;");
    }

    if ("show_settings" == comment) {
      is_allow_all_graph_update = false;
      hide_container();
      document.getElementById("header_show_settings").classList.add("displayed");
      document.getElementById("main_display_settings").setAttribute("style", "display:flex;");
    }
  } catch {
    show_error(e);
  }
}

eel.expose(add_remove_notification);
function add_remove_notification(is_add, id, initial, description) {
  const parent = document.getElementById("header_notifications");
  if (is_add) {
    let new_notification = document.createElement("div");
    new_notification.classList.add("notification_icon");
    new_notification.setAttribute("id", `notification_${id}`);
    new_notification.innerHTML = `
    <div class="notification_icon">
      <div class="notification_initial">${initial}</div>
      <div class="notification_popup">${description}</div>
    </div>
  `;
    parent.appendChild(new_notification);
  } else {
    parent.removeChild(document.getElementById(`notification_${id}`));
  }
}

// ヘッダーここまで

// 初期起動時

document.addEventListener("DOMContentLoaded", function () {
  try {
    console.log("DOM fully loaded and parsed");

    // Prevent page reload
    window.addEventListener("beforeunload", function (e) {
      // 開発時はコメントアウト
      // e.preventDefault();
      // e.returnValue = "本当に閉じますか？ウィンドウを閉じても、ロギングは継続されます。";
    });

    document.getElementById("header_show_connection").click(); // 起動時にデバイス接続設定の画面を表示
  } catch (e) {
    show_error(e);
  }
});

eel.expose(Get_Initial_Settings);
function Get_Initial_Settings(provided_setting_dict) {
  // Receive data from python (initialize)
  try {
    console.log("Initialize start");

    Object.keys(provided_setting_dict.values).forEach(function (id) {
      general_settings[id] = provided_setting_dict.values[id];
    });
    // Initialize dataset_list
    Object.keys(general_settings.data_list).forEach(function (id) {
      dataset_list[id] = general_settings.data_list[id];
      dataset_list[id]["chart_obj"] = undefined;
      dataset_list[id]["data"] = [];
    });

    // change dark mode
    if (general_settings.interface.dark_mode) {
      change_dark_mode((change_to = "dark"));
    } else {
      change_dark_mode((change_to = "light"));
    }

    // Insert elements in container
    const containers = document.getElementById("graphs");
    const indicators = document.getElementById("indicators");

    // 「すべてのグラフを表示する」ボタン挿入
    indicators.innerHTML += `\
      <div class="labels indicator indicator_all safe" onclick="focus_graph_to('all');" style="border-color: black;">\
        <span class="name">すべてのグラフを表示する</span>\
      </div>\
      `;

    Object.keys(dataset_list).forEach(function (id) {
      containers.innerHTML += `\
      <div class="container container_${id}">\
        <div class="labels">\
          <span class="name">${dataset_list[id].display_name}</span>\
          <span class="value value_${id}">-</span>\
          <span class="unit">${dataset_list[id].unit}</span>\
        </div>\
        <div class="chart">\
          <canvas id="chart_${id}"></canvas>\
        </div>\
      </div>\
      `;
      indicators.innerHTML += `\
      <div class="labels indicator indicator_${id}" onclick="focus_graph_to('${id}');">\
        <span class="name">${dataset_list[id].display_name}</span>\
        <br>\
        <span class="value value_${id}">-</span>\
        <span class="unit">${dataset_list[id].unit}</span>\
      </div>\
      `;
    });

    // Enable each graphs
    Object.keys(dataset_list).forEach(function (id) {
      let this_canvas = document.getElementById(`chart_${id}`).getContext("2d");
      dataset_list[id].chart_obj = new Chart(this_canvas, {
        type: "line",
        data: {
          labels: [],
          datasets: [
            {
              label: "Value",
              data: dataset_list[id].data,
              fill: true,
              backgroundColor: "rgba(255, 99, 132, 0.25)",
              borderWidth: 1,
              borderColor: "rgb(255, 99, 132)",
            },
          ],
        },
        options: {
          pointRadius: 0,
          animation: {
            duration: 0,
          },
          responsive: true,
          plugins: {
            legend: {
              display: false,
            },
          },
          scales: {
            x: {
              // min: 0,
              // max: general_settings.interface.graph_max_display,
              display: true,
            },
            y: {
              // min: 0,
              // max: 100,
              display: true,
            },
          },
        },
      });
    });

    // Insert settings
    const setting_tbody = document.getElementById("main_display_settings").getElementsByClassName("change_settings")[0].getElementsByTagName("tbody")[0];
    const changeable_settings_key = ["interface", "data_logging"];
    changeable_settings_key.forEach(function (key) {
      if (Object.keys(general_settings).includes(key)) {
        Object.keys(general_settings[key]).forEach(function (id) {
          var value_type = {
            number: "number",
            boolean: "checkbox",
            string: "text",
          }[typeof general_settings[key][id]];

          setting_tbody.innerHTML += `\
            <tr>\
              <td>${key}.${id}</td>\
              <td>${provided_setting_dict.description[key][id].replace("\n", "<br>")}</td>\
              <td>${general_settings[key][id]}</td>\
              <td><input type="${value_type}" id="setting_${key}_${id}" value="${general_settings[key][id]}"/></td>\
            </tr>\
          `;
        });
      }
    });

    console.log("Initialize done");
    is_received_initial_settings = true;
  } catch (e) {
    show_error(e);
  }
}

// 初期起動時ここまで

// Pythonとの接続

eel.expose(progress_manager);
function progress_manager(message) {
  // Python側の関数を非同期で実行するとき、処理進捗を表示する
  try {
    if (message == "connection_list_update_started") {
      insert_text_as_typing(document.getElementById("main_connection_settings").getElementsByClassName("message")[0], "接続リストをリセットしています。Bluetoothデバイスの検知には時間がかかります。しばらくお待ちください。", true);
      is_now_updating_connection_list = true;
    }
    if (message == "connection_list_update_done") {
      insert_text_as_typing(document.getElementById("main_connection_settings").getElementsByClassName("message")[0], "接続リストの更新が終わりました。ここで接続先デバイスを選ぶことができます。リストの更新には20秒程度かかります。", true);
      is_now_updating_connection_list = false;
    }
  } catch {
    show_error(e);
  }
}

eel.expose(window_alive_check);
function window_alive_check() {
  unix_before_data_updated = new Date().getTime();
}

setInterval(function () {
  const timeout_ms = 3000;
  // console.log(new Date().getTime() - unix_before_data_updated);
  if (new Date().getTime() - unix_before_data_updated > timeout_ms) {
    document.getElementById("alert_timeout").setAttribute("style", "display: block;");
    setTimeout(() => {
      window.close();
    }, 3000);
  }
});

// Pythonとの接続ここまで

// 接続先リスト
eel.expose(reload_connection_list);
function reload_connection_list(connection_list, clear_all = false) {
  const tbody = document.getElementById("main_connection_settings").getElementsByTagName("tbody")[0];
  if (clear_all) {
    tbody.innerHTML = "";
  }
  if (connection_list != undefined) {
    Object.keys(connection_list).forEach((id) => {
      var new_tr = document.createElement("tr");
      if (connection_list[id].connected === true) {
        new_tr.classList.add("disconnect");
        new_tr.innerHTML += `
          <td class="info">
            <div class="name">*${connection_list[id].name}</div>
            <div class="type">${connection_list[id].type}（接続済み）</div>
            <div class="address">${id}</div>
            <div class="connection_button disconnect" onclick="eel.connect_device('**disconnect**');">接続を解除する</div>
          </td>
          <td class="preview">
            <div class="raw_received_label">受信結果</div>
            <div class="raw_received">${connection_list[id].response}</div>
          </td>
        `;
      } else if (connection_list[id].connected === false) {
        new_tr.innerHTML += `
          <td class="info">
            <div class="name">${connection_list[id].name}</div>
            <div class="type">${connection_list[id].type}</div>
            <div class="address">${id}</div>
            <div class="connection_button connect" onclick="eel.connect_device('${id}');">接続する</div>
          </td>
          <td class="preview">
            <div class="raw_received_label">受信結果</div>
            <div class="raw_received">${connection_list[id].response}</div>
          </td>
        `;
      }
      tbody.appendChild(new_tr);
    });
  }
}

function on_reset_connection_list_button_pushed() {
  if (is_now_updating_connection_list == false) {
    reload_connection_list((connection_list = undefined), (clear_all = true)); // 接続リストをクリアする
    eel.get_device_list();
  }
}

// 接続先リストここまで

// 設定画面

function apply_new_settings() {
  try {
    const settings_table = document.getElementById("main_display_settings").getElementsByClassName("change_settings")[0];
    const settings_table_body = settings_table.getElementsByTagName("tbody")[0];
    const settings_table_body_trs = settings_table_body.getElementsByTagName("tr");
    Array.from(settings_table_body_trs).forEach((tr) => {
      var variable_id = tr.getElementsByTagName("td")[0].textContent;
      var variable_value = tr.getElementsByTagName("input")[0].value;
      var variable_id_parent = variable_id.split(".")[0];
      var variable_id_child = variable_id.split(".")[1];
      general_settings[variable_id_parent][variable_id_child] = variable_value;
    });
    insert_text_as_typing(document.getElementById("main_display_settings").getElementsByClassName("message")[0], "設定を適用しました。ここで表示やデータ処理に関する設定を変更できます。", true);
  } catch {
    show_error(e);
  }
}

function change_dark_mode(change_to = "") {
  const is_now_dark_mode = document.getElementsByTagName("html")[0].classList.contains("dark");

  const is_change_to_dark = change_to == "dark" || (change_to == "" && !is_now_dark_mode);
  const is_change_to_light = change_to == "light" || (change_to == "" && is_now_dark_mode);

  if (is_change_to_light) {
    document.getElementsByTagName("html")[0].classList.remove("dark");
    document.getElementsByTagName("html")[0].classList.add("light");
    return;
  } else if (is_change_to_dark) {
    document.getElementsByTagName("html")[0].classList.remove("light");
    document.getElementsByTagName("html")[0].classList.add("dark");
    return;
  }
}

// 設定画面ここまで
